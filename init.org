* repositories, packages
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src
* appearence
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
  (set-fringe-mode 1)
  (use-package moe-theme)
  (load-theme 'moe-dark t)
  (set-face-attribute 'default nil :height 130)
#+end_src
* QOL
#+begin_src emacs-lisp
  (setq dired-listing-switches "-aBhl --group-directories-first")
  (setq visible-bell t)
  (setq dired-kill-when-opening-new-dired-buffer t)
  (icomplete-vertical-mode)
#+end_src
* custom functions
** select entire text block
#+begin_src emacs-lisp
  (defun custom-text-block-select ()
    "select entire text block pointer is on"
    (interactive)
    (let ((initpoint (save-excursion
		       (move-beginning-of-line 1)
		       (while (and (not (bobp)) (not (looking-at-p "\n")))
			 (previous-line)
			 (move-beginning-of-line 1))
		       (while (and (looking-at-p "\n") (not (bobp)))
			 (previous-line)
			 (move-beginning-of-line 1))
		       (unless (bobp) (next-line))
		       (point)))
	  (endpoint (save-excursion (forward-paragraph) (point))))
      (set-mark initpoint)
      (goto-char endpoint)))

  (global-set-key (kbd "C-<") 'custom-text-block-select)
  #+end_src
* vanilla bindings
** windows
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-k") 'windmove-left)
  (global-set-key (kbd "C-M-;") 'windmove-right)
  (global-set-key (kbd "C-M-o") 'windmove-up)
  (global-set-key (kbd "C-M-l") 'windmove-down)
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-z"))
#+end_src
** buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") 'previous-buffer)
  (global-set-key (kbd "<f2>") 'next-buffer)
  (global-set-key (kbd "M-i") 'previous-buffer)
  (global-set-key (kbd "M-p") 'next-buffer)
#+end_src
** electric buffer list
#+begin_src emacs-lisp
  (global-set-key "\C-x\C-b" 'electric-buffer-list)  
#+end_src
** diff current buffer with disk file
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-<") (lambda () (interactive) (diff-buffer-with-file)))
#+end_src
* japanese text
#+begin_src emacs-lisp
  (set-fontset-font t 'japanese-jisx0208 "Noto Sans CJK JP")
#+end_src
* some packages
** avy
#+begin_src emacs-lisp
  (use-package avy)

  (setq avy-timeout-seconds 0.3)		; this feels a bit short
  (global-set-key (kbd "M-j") 'avy-goto-char-timer)

  (global-set-key (kbd "M-l") 'avy-goto-line) ; not very useful
#+end_src
** ruby-end
#+begin_src emacs-lisp
  (use-package ruby-end)
#+end_src
#+begin_src emacs-lisp
  (use-package magit)

  (use-package file-info)

  (use-package treemacs)

  (use-package smartparens)
  (smartparens-global-mode t)

  (use-package aggressive-indent)
  (global-aggressive-indent-mode 1)

  (use-package nov)

  (use-package electric-operator)
#+end_src
* language hooks
#+begin_src emacs-lisp
  (add-hook 'ruby-mode-hook 'display-line-numbers-mode)
  (add-hook 'ruby-mode-hook 'electric-operator-mode)
#+end_src
